import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_gemini/flutter_gemini.dart';
import 'package:flutter_markdown/flutter_markdown.dart';
import 'package:tap_books/src/widgets/chat_input_box.dart';

class ChatView extends StatefulWidget {
  const ChatView({super.key, this.book});

  final QueryDocumentSnapshot? book;

  static const routeName = "/chat";

  @override
  State<ChatView> createState() => _ChatViewState();
}

class _ChatViewState extends State<ChatView> {
  final controller = TextEditingController();
  final gemini = Gemini.instance;
  bool _loading = false;

  bool get loading => _loading;

  set loading(bool set) => setState(() => _loading = set);
  final List<Content> chats = [];

  List<String> _prompts = [
    "jkljkljkll",
    "ghjghjghhj"
  ];

  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
   
    return StreamBuilder<User?>(
        stream: FirebaseAuth.instance.authStateChanges(),
        builder: (context, snapshot) {
          return Scaffold(
              appBar: AppBar(),
              //backgroundColor: const Color(0x00191b23),
              body: widget.book != null
                  ? Expanded(child: ListView(
                    scrollDirection: Axis.vertical,
                    shrinkWrap: true,
                      children: [
                        Padding(
                          padding: const EdgeInsets.fromLTRB(20, 0, 20, 0),
                          child: Text(
                            (widget.book?.data() as Map)["title"],
                            style: const TextStyle(
                                fontSize: 20, fontWeight: FontWeight.bold),
                          ),
                        ),
                        Opacity(
                          opacity: 0.5,
                          child: Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 20),
                            child: Text(
                              (widget.book?.data() as Map)["author"],
                              style: const TextStyle(fontSize: 15),
                            ),
                          ),
                        ),
                        Container(
                          height: 10,
                        ),
                        Container(
                          height: 1000,
                          decoration: const BoxDecoration(
                            color: Colors.black,
                            borderRadius: BorderRadiusDirectional.only(
                                topStart: Radius.circular(30),
                                topEnd: Radius.circular(30)),
                          ),
                          child: Column(
                            children: [
                              Padding(
                                  padding: const EdgeInsets.all(20),
                                  child: Row(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      const Padding(
                                          padding:
                                              EdgeInsets.fromLTRB(0, 0, 5, 0),
                                          child: Icon(Icons.message)),
                                      Flexible(
                                        child: Text(
                                            "Hi ${snapshot.data?.displayName}! What are some key concepts from '${(widget.book?.data() as Map)["title"]}' you want to discuss?"),
                                      )
                                    ],
                                  )),
                              SizedBox(
                                height: 180,
                                child: ListView(
                                  scrollDirection: Axis.horizontal,
                                  children: widget.book != null &&
                                          (widget.book?.data()
                                                  as Map)["book_prompts"] !=
                                              null
                                      ? (((widget.book?.data()
                                              as Map)["book_prompts"]) as List)
                                          .map(
                                            (e) => FutureBuilder(
                                                future: (e as DocumentReference)
                                                    .get(),
                                                builder: (context, snapshot) {
                                                  if (snapshot.hasError) {
                                                    return const Text(
                                                        "An error occured.");
                                                  }

                                                  if (snapshot
                                                          .connectionState ==
                                                      ConnectionState.waiting) {
                                                    return const SizedBox(
                                                      width: double.infinity,
                                                      child: Column(
                                                        children: [
                                                          CircularProgressIndicator()
                                                        ],
                                                      ),
                                                    );
                                                  }
                                                  return SizedBox(
                                                    width: 200,
                                                    child: GestureDetector(
                                                      onTap: () {
                                                        setState(() {
                                                          _prompts.add((snapshot.data?.data() as Map)["prompt"]);
                                                        });
                                                       
                                                      },
                                                      child: Card(
                                                        child: Padding(
                                                            padding:
                                                                const EdgeInsets.all(
                                                                    20),
                                                            child: Stack(
                                                              children: [
                                                                Opacity(
                                                                  opacity: 0.5,
                                                                  child: Align(
                                                                    alignment:
                                                                        Alignment
                                                                            .topLeft,
                                                                    child: Text(
                                                                        maxLines:
                                                                            2,
                                                                        overflow:
                                                                            TextOverflow
                                                                                .ellipsis,
                                                                        (snapshot
                                                                            .data
                                                                            ?.data() as Map)["title"]),
                                                                  ),
                                                                ),
                                                                Padding(
                                                                  padding:
                                                                      const EdgeInsets
                                                                          .only(
                                                                          top:
                                                                              45),
                                                                  child: Align(
                                                                    alignment:
                                                                        Alignment
                                                                            .topLeft,
                                                                    child: Text(
                                                                        style:
                                                                            const TextStyle(
                                                                          fontWeight:
                                                                              FontWeight.bold,
                                                                        ),
                                                                        (snapshot
                                                                            .data
                                                                            ?.data() as Map)["desc"]),
                                                                  ),
                                                                ),
                                                                const Spacer(),
                                                                const Positioned(
                                                                    bottom: 0,
                                                                    right: 0,
                                                                    child: Icon(
                                                                      Icons
                                                                          .arrow_forward,
                                                                      size: 20,
                                                                    ))
                                                              ],
                                                            )),
                                                      ),
                                                    ),
                                                  );
                                                }),
                                          )
                                          .toList()
                                      : [
                                          const Padding(
                                              padding: EdgeInsets.all(20),
                                              child: Center(
                                                  child: Opacity(
                                                      opacity: 0.5,
                                                      child: Text(
                                                          "No prompts available yet."))))
                                        ],
                                ),
                              ),   
                              ..._prompts.map((e)=>Text(e))                                                    
                            ],
                          ),
                        ),                        
                      ],
                    ))
                  : const Text("No Data Received"));
        });
  }

  Widget chatItem(BuildContext context, int index) {
    final Content content = chats[index];

    return Card(
      elevation: 0,
      color: content.role == 'model' ? Colors.black45 : Colors.transparent,
      child: Padding(
        padding: const EdgeInsets.fromLTRB(20, 0, 20, 0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Markdown(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                data:
                    content.parts?.lastOrNull?.text ?? 'cannot generate data!'),
          ],
        ),
      ),
    );
  }
}




Padding(
        padding: const EdgeInsets.all(16),
        // Glue the SettingsController to the theme selection DropdownButton.
        //
        // When a user selects a theme from the dropdown list, the
        // SettingsController is updated, which rebuilds the MaterialApp.
        child: DropdownButton<ThemeMode>(
          // Read the selected themeMode from the controller
          value: controller.themeMode,
          // Call the updateThemeMode method any time the user selects a theme.
          onChanged: controller.updateThemeMode,
          items: const [
            DropdownMenuItem(
              value: ThemeMode.system,
              child: Text('System Theme'),
            ),
            DropdownMenuItem(
              value: ThemeMode.light,
              child: Text('Light Theme'),
            ),
            DropdownMenuItem(
              value: ThemeMode.dark,
              child: Text('Dark Theme'),
            )
          ],
        ),
      )